Tests
Calculations: R = k/n
len(k) = logM x L 

1. SPARC -- Rate: 0.75 k = 324 n = 432
LDPC -- Rate: 1.5 x 0.5 m = 324 k = 648 n = 432

SPARC does much better because a 0.75 R is much easier to decode than a 1.5 R. I think for the LDPC to have a good effect it needs to be a much larger rate. Not 0.5. 

2. SPARC -- Rate: 1.125 k = 1620 n = 1440
LDPC -- Rate: 1.35 x 5/6 m = 1620 k = 1944 n = 1440

Again SPARC is much better, must be because of the gains of a 1.125 R compared to 1.35

3. SPARC -- Rate: 1.125 k = 1944 n = 1728
LDPC -- Rate: 1.35 x 5/6 m = 1620 k = 1944 n = 1440

Same rate but now n is larger 

4. SPARC -- Rate: 1.35 k = 1944 n = 1440
LDPC -- Rate: 1.35 x 5/6 = 1.125 m = 1620 k = 1944 n = 1440

5. SPARC -- Rate: 1.5 k = 1944 n = 1296
LDPC -- Rate: 1.5 x 5/6 = 1.25 m = 1620 k = 1944 n = 1296

Tests 4 and 5 show that adding an LDPC code afterwards improves the performance but this is at the expense of a smaller rate. There must be a balance at where it can improve both. 

6. SPARC -- Rate: 1.4 k = 6480 n = 4629      
LDPC -- Rate: 1.68 x 5/6 m = 6480 k = 7776 n = 4629
logM = 4, M = 16, L = 1944

7. SPARC -- Rate: 1.0 k = 5496 n = 5496      
SPARC+LDPC -- Sparc Rate: 1.118 m = 3240 k = 6144 n = 5496

Even with only using ldpc on the first section the ldpc + sparc still gives worse results. 

8. Re-running AMP with original amp for unprotected and correct for ldpc

9. Re-running AMP with zeros for unprotected and correct ldpc 

10. Re-running AMP for only when the ldpc codeword is correctly decoded. 



NEW SECTION: 
15. Just SPARC on its own compared with LDPC + SPARC for my report. Using similar values to Adams paper. Overall R = 0.8,
k = 4860, M = 512 and 70% protected. 

16. Re-running AMP tried again but still doesn't give waterfall result. Retiring for now. 

UPDATED SPARC FUNCTIONS: 

18. Testing SPARC on it's own with AMP works 



NEW SPARC FUNCTIONS USED: 

21. SPARC, SPARC + LDPC, NAIVE DECODER. This time the SPARC + LDPC decoder uses the normal 200 iterations but with the integrated
one, the bp iterations is only 6. Does worse than when 200 was used in the integrated decoder -- BP must have done a lot of the heavy
lifting before. I will want to test my code is fully correct tho. As it's giving the worst possible results (As if randomly picked).


31. Uses a loop for AMP and BP 
32. Similar with the naive decoder doing 200 iterations at the end
33. Uses a loop for AMP and BP as before but now rather than outputting the bits from a hard decision from BP,
the probabilities are calculated from the LLRs, it's converted back to a beta estimate and a hard decision is made from here. 
(I assume the difference at a SNR around 3 is due to BP constantly starting and stopping with LLR values, I am really confused about
this though.)


35. Testing just AMP vs Integrated with no final BP. For normal AMP 25 iterations were used. For Integrated 100 iterations were
used with BP iterations of 5. 